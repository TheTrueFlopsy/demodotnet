#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Subsection*
About substring instances and periodic strings
\end_layout

\begin_layout Standard
Definition 1: A string 
\begin_inset Formula $N$
\end_inset

 (the needle) 
\emph on
has an instance
\emph default
 as a substring at index 
\begin_inset Formula $i$
\end_inset

 in string 
\begin_inset Formula $H$
\end_inset

 (the haystack) iff 
\begin_inset Formula $\forall k\in[0,|N|),N[k]=H[i+k]$
\end_inset

.
\end_layout

\begin_layout Standard
Definition 2: Two instances of a string 
\begin_inset Formula $N$
\end_inset

 at indices 
\begin_inset Formula $i,j$
\end_inset

 in some string 
\emph on
overlap
\emph default
 iff the intervals 
\begin_inset Formula $[i,i+|N|)$
\end_inset

 and 
\begin_inset Formula $[j,j+|N|)$
\end_inset

 overlap (i.e.
 have a nonempty intersection).
\end_layout

\begin_layout Standard
Definition 3: A string 
\begin_inset Formula $S$
\end_inset

 is 
\emph on
periodic
\emph default
 with 
\emph on
periodic prefix
\emph default
 
\begin_inset Formula $P$
\end_inset

, iff 
\begin_inset Formula $\forall k\in[0,|S|),S[k]=P[k\mod|P|]$
\end_inset

.
 In that case, the number of repetitions of 
\begin_inset Formula $P$
\end_inset

 in 
\begin_inset Formula $S$
\end_inset

, including any final partial one, is 
\begin_inset Formula $\lceil|S|/|P|\rceil$
\end_inset

.
 The length of the periodic prefix (i.e.
 
\begin_inset Formula $|P|$
\end_inset

) is a 
\emph on
period
\emph default
 of 
\begin_inset Formula $S$
\end_inset

.
\end_layout

\begin_layout Standard
Theorem 1: To have overlapping instances in 
\emph on
any
\emph default
 string 
\begin_inset Formula $H$
\end_inset

, a string 
\begin_inset Formula $N$
\end_inset

 must be periodic.
 Furthermore, all overlapping instances will be offset from each other by
 multiples of a period of 
\begin_inset Formula $N$
\end_inset

 (i.e.
 if 
\begin_inset Formula $P$
\end_inset

 is a periodic prefix and there are overlapping instances at indices 
\begin_inset Formula $i$
\end_inset

 and 
\begin_inset Formula $j$
\end_inset

, then 
\begin_inset Formula $(i-j)/|P|\in\mathbb{Z}$
\end_inset

).
\end_layout

\begin_layout Standard
Proof: By Definition 2, overlap of two instances occurs iff an instance
 occurs at index 
\begin_inset Formula $i$
\end_inset

 and another instance occurs at index 
\begin_inset Formula $i+p$
\end_inset

 for some 
\begin_inset Formula $p\in[1,|N|)$
\end_inset

.
 This means that 
\begin_inset Formula $\forall k\in[0,|N|-p),N[k]=N[p+k]$
\end_inset

 (since the instance at 
\begin_inset Formula $i+p$
\end_inset

 means that 
\begin_inset Formula $H[(i+p)+k]=N[k]$
\end_inset

 and the instance at 
\begin_inset Formula $i$
\end_inset

 means that 
\begin_inset Formula $H[i+(p+k)]=N[p+k]$
\end_inset

), which is equivalent to saying that 
\begin_inset Formula $N$
\end_inset

 consists of 
\begin_inset Formula $\lceil|N|/p\rceil$
\end_inset

 repetitions (the last one of which may be partial) of a prefix of length
 
\begin_inset Formula $p$
\end_inset

 (to see this, consider that if 
\begin_inset Formula $p+k<|N|-p$
\end_inset

, then 
\begin_inset Formula $N[k]=N[p+k]=N[p+(p+k)]$
\end_inset

, etc.).
\end_layout

\begin_layout Subsection*
About algorithms that find substring instances
\end_layout

\begin_layout Standard
To find all instances of a string 
\begin_inset Formula $N$
\end_inset

 in another string 
\begin_inset Formula $H$
\end_inset

, it is by definition sufficient to test whether 
\begin_inset Formula $\forall k\in[0,|N|),N[k]=H[i+k]$
\end_inset

 for all 
\begin_inset Formula $i$
\end_inset

 that are valid indices of 
\begin_inset Formula $H$
\end_inset

.
 Every substring has to start somewhere, and that 
\begin_inset Quotes eld
\end_inset

somewhere
\begin_inset Quotes erd
\end_inset

 can only be a valid index of 
\begin_inset Formula $H$
\end_inset

.
\end_layout

\begin_layout Standard
Assume that 
\begin_inset Formula $H$
\end_inset

 is processed as a stream, one character at a time in ascending index order.
 Further assume that we have reached the end of a complete or partial matching
 substring that starts at index 
\begin_inset Formula $i$
\end_inset

, i.e.
 we have read and checked some number of characters 
\begin_inset Formula $p\in[1,|N|]$
\end_inset

 and found that 
\begin_inset Formula $\forall k\in[0,p),N[k]=H[i+k]$
\end_inset

 (but in the case of a partial match (i.e.
 
\begin_inset Formula $p<|N|$
\end_inset

), 
\begin_inset Formula $N[p]\neq H[i+p]$
\end_inset

).
 We may now have to consider some of those characters again, since there
 may also be instances that start somewhere in the interval 
\begin_inset Formula $[i+1,i+p)$
\end_inset

.
 A straightforward way to do this would be to maintain a look-behind buffer,
 containing all characters in 
\begin_inset Formula $H$
\end_inset

 that have been read from the input stream during the substring match attempt
 but not yet tested as potential first characters of an instance of 
\begin_inset Formula $N$
\end_inset

.
 However, since a substring match attempt only continues while the checked
 characters in 
\begin_inset Formula $H$
\end_inset

 match the characters at the corresponding positions in 
\begin_inset Formula $N$
\end_inset

, we know that such a buffer would always contain a prefix of the known
 string 
\begin_inset Formula $N$
\end_inset

.
 This means that there can be an instance at any index 
\begin_inset Formula $i+m$
\end_inset

 in 
\begin_inset Formula $H$
\end_inset

, where 
\begin_inset Formula $m\in[1,p)$
\end_inset

, only if the substring of 
\begin_inset Formula $N$
\end_inset

 that consists of the characters at indices 
\begin_inset Formula $[m,p)$
\end_inset

 matches a prefix of 
\begin_inset Formula $N$
\end_inset

 (i.e.
 
\begin_inset Formula $\forall k\in[0,p-m),N[k]=N[m+k]$
\end_inset

).
 In that case, we already have a new partial matching substring and may
 continue matching that substring from index 
\begin_inset Formula $i+p$
\end_inset

 in 
\begin_inset Formula $H$
\end_inset

 and index 
\begin_inset Formula $p-m$
\end_inset

 in 
\begin_inset Formula $N$
\end_inset

.
 If we know all the places (if any) where 
\begin_inset Formula $N$
\end_inset

 partially repeats itself from the start, then we know all the places where
 we may have to go back and look for another instance.
\end_layout

\begin_layout Standard
One approach to handling the need to re-check characters that have already
 been checked and read is to first generate a list where the start index
 
\begin_inset Formula $m$
\end_inset

 and length 
\begin_inset Formula $L$
\end_inset

 of every repeated prefix in 
\begin_inset Formula $N$
\end_inset

 are recorded and then, whenever the end of a matching substring of length
 
\begin_inset Formula $p$
\end_inset

 has been reached, check whether any prefixes on the list satisfy the condition
 
\begin_inset Formula $m<p\wedge L\ge p-m$
\end_inset

.
 If the prefix with the lowest start index among these prefixes is selected
 (this can easily be accomplished by using a prefix list that is sorted
 in ascending start index order) and the search then continues with a new
 matching substring of length 
\begin_inset Formula $p-m$
\end_inset

, then every instance of 
\begin_inset Formula $N$
\end_inset

 in 
\begin_inset Formula $H$
\end_inset

 will be found.
 This is because each instance that overlaps with a matching substring must
 start at a repeated prefix, and if we always continue the search at the
 first repeated prefix that could be the start of an instance, then we'll
 never miss any instance.
\end_layout

\begin_layout Standard
Repeated prefixes that are contained in another repeated prefix (e.g.
 like 
\begin_inset Quotes eld
\end_inset

AA
\begin_inset Quotes erd
\end_inset

 at index 8 in 
\begin_inset Quotes eld
\end_inset

AABAAAABAACC
\begin_inset Quotes erd
\end_inset

 is contained in 
\begin_inset Quotes eld
\end_inset

AABAA
\begin_inset Quotes erd
\end_inset

 at index 5) may be omitted from the list of prefixes without breaking the
 algorithm.
 Contained prefixes will never be selected as continuation points by the
 algorithm, because the containing prefix always starts before the contained
 one and ends at or after it.
 This means that by the time 
\begin_inset Formula $L<p-m$
\end_inset

 for the containing prefix (making it disproven as a potential instance
 by subsequent non-matching characters and therefore no longer selectable),
 the same will be the case for the contained prefix.
\end_layout

\begin_layout Standard
Given the algorithm described above, applying overlapping or non-overlapping
 substring search is simply a matter of either consulting or not consulting
 the prefix list after a complete instance of the sought string has been
 found.
\end_layout

\begin_layout Subsection*
More on periodic strings
\end_layout

\begin_layout Standard
Theorem 2: No string has two distinct periods 
\begin_inset Formula $p,q$
\end_inset

 that are not both multiples of a single period (a common factor of 
\begin_inset Formula $p$
\end_inset

 and 
\begin_inset Formula $q$
\end_inset

, possibly 
\begin_inset Formula $p$
\end_inset

 or 
\begin_inset Formula $q$
\end_inset

 itself, or 1 (if the string is constant, i.e.
 just a repetition of a single character)).
\end_layout

\begin_layout Standard
FIXME: Theorem 2 needs to be restricted to be true.
 I have discovered that if a single complete repetition plus a partial repetitio
n is enough to identify a period, then a string can indeed have several
 periods that are not multiples of any common factor period (e.g.
 
\begin_inset Quotes eld
\end_inset

AABAAABAAA
\begin_inset Quotes erd
\end_inset

 has both period 4 and period 9 (but not period 1, which is the only common
 factor)).
\end_layout

\begin_layout Standard
TODO: Prove Theorem 2.
 The (restricted) theorem is implied by the statement that 
\emph on
no sequence
\emph default
 (finite or infinite, not even a constant one) has two periods that are
 not both multiples of a fundamental (i.e.
 shortest) period (if we exclude 
\begin_inset Quotes eld
\end_inset

periods
\begin_inset Quotes erd
\end_inset

 that are greater than half the length of a finite sequence).
 I believe this is true.
\end_layout

\begin_layout Standard
Corollary 2.1: If a string 
\begin_inset Formula $S$
\end_inset

 is periodic, then it has a unique shortest periodic prefix 
\begin_inset Formula $P$
\end_inset

 such that all periodic prefixes of 
\begin_inset Formula $S$
\end_inset

 are multiples of 
\begin_inset Formula $P$
\end_inset

.
 This is just Theorem 2 stated as a universal positive instead of an existential
 negative (plus the facts that no string has more than one distinct prefix
 of the same length, that no shorter string is a (non-zero) multiple of
 a longer one and that 
\begin_inset Quotes eld
\end_inset

being a multiple of
\begin_inset Quotes erd
\end_inset

 is transitive).
\end_layout

\begin_layout Standard
Note that together, Theorem 1 and Corollary 2.1 imply that there's no need
 to backtrack in the haystack to find overlapping instances of the needle
 string 
\begin_inset Formula $N$
\end_inset

.
 If we are searching for a periodic 
\begin_inset Formula $N$
\end_inset

 (and if we aren't, then by Theorem 1 there are no overlapping instances)
 with shortest periodic prefix 
\begin_inset Formula $P$
\end_inset

 and find an instance that doesn't overlap with any preceding instance (i.e.
 an instance that begins at a lower index in the haystack), then we know
 that we potentially have the beginning of an overlapping instance (i.e.
 the found instance minus the first repetition of 
\begin_inset Formula $P$
\end_inset

).
 We may continue to check this potential overlapping instance against the
 suffix of 
\begin_inset Formula $N$
\end_inset

 starting at index 
\begin_inset Formula $|N|-|P|$
\end_inset

.
 If we do find an overlapping instance, we may continue searching for additional
 overlapping instances in the same way.
\end_layout

\end_body
\end_document
