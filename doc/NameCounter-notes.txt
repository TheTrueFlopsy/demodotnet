
---<<< To-Do List >>>---
x Finish an initial version of the code.

o Convince myself that the algorithm is correct. Document my reasoning.

x Create and run a test suite.
	x Use partial classes to put the test code in a separate file.
	x Add test cases for a test file that contains some weird characters.
	? Built-in C#/.NET unit testing?
		! Nope, AFAICT. There are various 2nd/3rd-party tools, though.
			! https://docs.microsoft.com/en-us/dotnet/core/testing/#testing-tools

x Document the code.
	! https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/documentation-comments
	! Apparently the Mono way of code documentation is to NOT include full documentation in the code. Instead you're supposed to use a tool to generate stub documentation from compiled assemblies and then fill the stub files with content.
		! 'man mdoc', 'man 5 mdoc'

* Write a summary of my solution and the thinking behind it. Describe my assumptions about the task.
	! Write this in the README file.

* Review the code. Consider beautifications and improved error handling/reporting.

* Submit the code to Antura.


---<<< Assumptions of My Solution >>>---
* Counts instances of the query string, not lines containing that string.
	! Fully character-oriented processing. Treats line endings in the input as any other characters.

* Assumes ASCII/UTF-8 encoding and that operating on C# char:s (i.e. UTF-16 code units) is sufficient.
	! No specific requirements of that sort were stated and I didn't feel like getting fancy with it.
	! The widespread use of UTF-8 and high-low surrogate encoding of UTF-16 make it unlikely that this approach will result in unintended behavior.

* Non-overlapping search is the default behavior.
	! Overlapping search rarely makes a difference in natural text, can be non-intuitive and is often not intended.
	! Overlapping search can be enabled if needed.

* Self-contained, platform and toolchain agnostic solution.
	! For ease of development and evaluation. This is not a program that will be used in production.
	! Just two code files. Can be built with a simple compiler invocation.
	! Only basic platform libraries used.
	! Path format agnostic code. Lets the platform construct paths.
	! Built-in test suite invoked with CLI option.
	! Written for Mono on Debian.

* Doc comments in NaturalDocs format.
	! Because there doesn't appear to be any standard doc tool for .NET, and NaturalDocs is what I'm familiar with.


---<<< Notes on the Search Algorithm >>>---
Hypothesis: To have overlapping instances in any target string H (haystack), a sought string N (needle) must consist of at least two repetitions of a prefix, the last of which may be partial. An overlapping instance occurs iff an instance occurs at H[i] and another instance occurs at H[i+d], for some d in [1, len(N)). This means that for all j in [0, len(N)-d), N[j] = N[d+j], which is equivalent to the hypothesis.

TODO: Write a proper proof of the above.

This means that there's no need to backtrack to find overlapping instances. Whenever an instance that was not preceded by overlapping instances has been found, we know that we have the beginning of an overlapping instance (i.e. the found instance minus the first repetition of the prefix). We may continue to check this partial hit in H against the suffix of N starting at len(N)-len(prefix).

TODO: Write a proper proof of the above.

The maximum number of instances overlapping with an instance of a string that consists of n repetitions of a prefix is 2*(n-1). This is true regardless of whether the last repetition is partial. Imagine lining up two instances vertically and then sliding one of them left or right by increments equal to the length of the (complete) repeated prefix.

TODO: Write a proper proof of the above.

TODO: Prove that all overlapping instances must start at a multiple of a single shortest repeated prefix length, i.e. it is not possible to separate a string into repetitions of two or more different prefixes, where neither is a multiple of the other or any shorter repeated prefix.

aaa
aaaaaaa
aaa
 aaa
	aaa
	 aaa
		aaa

ababa
ababababababa
ababa
	ababa
		ababa
			ababa
				ababa

ababCabaD
ababCabab

abCabDabC
abCabC


aaabaaabcc

aaaa
aaabaaaba

a
aab
aabaabc
aabaabcaabaabcd
aabaabcaabaabcdaabaabcaabaabcde
aabaabcaabaabcdaabaabcaabaabcdeaabaabcaabaabcdaabaabcaabaabcdef

a
aab
aabac
aabacad
aabacadae
aabacadaeaf

ISSUE: Since the repeated prefix is an arbitrary string, this kind of structure (rep. prefix has a rep. prefix which has a ...) can be arbitrarily deep. What does that mean for any attempt to "intelligently" handle restart after failed partial match? Deal with the highest level of prefixing that you've proceeded into? How do you keep track of all the prefix levels? Is all this even worth it for what is a corner case in the first place?

IDEA: Turn the problem inside out. Build the search algorithm around the repeated prefix structure and make strings with repeat count 1 the "corner case".
	'aaabaaabaacc'
	[('aaab', 10), 'cc']
	[([('a', 3), 'b'], 10), 'cc']
	
	'abaBaaC'
	[('abaBa', 6), 'C']
	[(('abaB', 5), 6), 'C']
	[(([('ab', 3), 'B'], 5), 6), 'C']
	
	abaBabaabC
ISSUE: Can all this match restart bothersomeness be neatly integrated with overlapping instance search? Repeating prefixes are central there, too.

IDEA: Is it always sufficient to continue the match with the unmatching character, now at position pos-|P| in N, unless pos-|P| is not in the repeating-prefix part of N (then start at position 0)?


NOTE: I need to distinguish two different concepts that are both in some sense about a "repeating prefix". The first is simply some prefix of the string reappearing later in the string (i.e. N > 0 chars starting at I > 0 are equal to the first N chars of the string). The second is a special case of the first, some prefix of the string being consecutively repeated at least twice at the start of the string (i.e. the first N > 0 chars of the string are equal to the N chars starting at I = k*N for all k in [1, K] for some K > 0). An extension of the second case allows the last repetition to be partial (i.e. end after less than N (but at least one) repeated chars).
	! The first sense is relevant to restarting after a failed partial match.
	! The extended second sense (specifically, strings that consist entirely of such a repeated prefix) is relevant to finding overlapping matches.

aabaaabaaa   (length 10)
aaba,aaba,aa (period 4)
aabaaabaa,a  (period 9) <- non-multiple of 4

aaabaaaabaaaa   (length 13)
aaaba,aaaba,aaa (period 5)
aaabaaaabaaa,a  (period 12) <- non-multiple of 5
aaabaaaabaa,aa  (period 11) <- non-multiple of 5
aaabaaaaba,aaa  (period 10)
